---
main:
  description: "EXPECTED FAILURE Validate the argument spec for the 'test1' role"
  argument_spec:
    test1_choices:
      description: |
        "Select the only thing you need"
      required: false
      # required: true
      choices:
        - "this paddle game"
        - "the astray"
        - "this remote control"
        - "the chair"
      type: "str"
      default: "this paddle game"
    tidy_expected:
      # required: false
      # default: none
      type: "list"
    test1_var1:
      # required: true
      default: "THIS IS THE DEFAULT SURVEY ANSWER FOR test1_survey_test1_var1"
      type: "str"
    test1_var2:
      required: false
      default: "This IS THE DEFAULT fake band name / test1_var2 answer from survey_spec.yml"
      type: "str"
    bust_some_stuff:
      # required: false
      type: "int"
    peanut_butter:
      descreption: |
        "Use if it is peanut butter jelly time.
        Warning: Do not use if you are alergic to peanut butter"
      required: false
      type: "str"
    jelly:
      required: false
      type: "str"
    hostname:
      type: "str"
    ip_address:
      type: "str"
    secret_choices:
      description: |
        "The evil of two lessers, but even if you decide not to decide you still have made a choice"
      choices:
        - "secret_ballot_choice1"
        - "secret_ballot_choice2"
      required: false
      type: "str"
      no_log: true
    some_str:
      type: "str"
    some_list:
      type: "list"
      elements: "float"
    some_dict:
      type: "dict"
    some_bool:
      type: "bool"
    some_int:
      type: "int"
    some_float:
      type: "float"
    some_path:
      type: "path"
    some_raw:
      type: "raw"
    some_jsonarg:
      type: "jsonarg"
      required: true
    some_json:
      type: "json"
      required: true
    some_bytes:
      type: "bytes"
    some_bits:
      type: "bits"
    some_str_aliases:
      type: "str"
      aliases:
        - "some_str_nicknames"
        - "some_str_akas"
        - "some_str_formerly_known_as"
    some_dict_options:
      type: "dict"
      options:
        some_second_level:
          type: "bool"
          default: true
    some_str_removed_in:
      type: "str"
      removed_in: 2.10
    do_something_to_some_tmp_path:
      type: "bool"
    some_tmp_path:
      type: "path"

  check_invalid_arguments: true
  required_together:
    - ['peanut_butter', 'jelly']
  mutually_exclusive:
    - ['bust_some_stuff', 'tidy_expected']
  required_one_of:
    - ["hostname", "ip_address"]
  # if you want crunchy peanut butter, you must provide a hostname... sure.
  required_if:
    - ["peanut_butter", "crunchy", ["jelly", "hostname"]]
    - ["do_something_to_some_path", true, ["some_tmp_path"]]
  add_file_common_args: true

other.yml:
  name: "test1_simple_preset_arg_spec_other"
  description: "A simpler set of required args for other tasks"
  argument_spec:
    test1_var1:
      default: "This the default value for the other set of arg specs for  test1 test1_var1"
      type: "str"

test1_other.yml:
  description: "test1_other for role_that_includes_role"
  argument_spec:
    some_test1_other_arg:
      default: "The some_test1_other_arg default value"
      type: str
    some_required_str:
      type: str
      required: true

# slightly weird example, I just used the pip module's DOCUMENTATION strings to see
# what makes sense, but apply to a role as needed.
pip.yml:
  short_description: Manages Python library dependencies
  description: |
    "Manage Python library dependencies. To use this module, one of the following keys is required:
     C(name) or C(requirements)."
  argument_spec:
    name:
      description: |
        "The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.
         This can be a list (since 2.2) and contain version specifiers (since 2.7)."
      type: "list"
    version:
      description: |
         The version number to install of the Python library specified in the I(name) parameter.
      type: "str"
    requirements:
      description: |
          The path to a pip requirements file, which should be local to the remote system.
          File can be specified as a relative path if using the chdir option.
      type: "str"
    virtualenv:
      description: |
          An optional path to a I(virtualenv) directory to install into.
          It cannot be specified together with the 'executable' parameter
          (added in 2.1).
          If the virtualenv does not exist, it will be created before installing
          packages. The optional virtualenv_site_packages, virtualenv_command,
          and virtualenv_python options affect the creation of the virtualenv.
      type: "path"
    virtualenv_site_packages:
      description: |
          Whether the virtual environment will inherit packages from the
          global site-packages directory.  Note that if this setting is
          changed on an already existing virtual environment it will not
          have any effect, the environment must be deleted and newly
          created.
      type: "bool"
      default: false
      version_added: "1.0"
    virtualenv_command:
      description: |
        The command or a pathname to the command to create the virtual
        environment with. For example C(pyvenv), C(virtualenv),
        C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv).
      default: "virtualenv"
      version_added: "1.1"
      type: "path"
    virtualenv_python:
      description: |
        The Python executable used for creating the virtual environment.
        For example C(python3.5), C(python2.7). When not specified, the
        Python version used to run the ansible module is used. This parameter
        should not be used when C(virtualenv_command) is using C(pyvenv) or
        the C(-m venv) module.
      version_added: "2.0"
      type: "str"
    state:
      description: |
        The state of module
        The 'forcereinstall' option is only available in Ansible 2.1 and above.
      choices:
        - absent
        - forcereinstall
        - latest
        - present
      default: present
      type: "str"
    extra_args:
      description: |
        Extra arguments passed to pip.
        # version_added: "1.0"
      type: "str"
    editable:
      description: |
        Pass the editable flag.
      type: "bool"
      default: false
      version_added: "2.0"
    chdir:
      description: |
        cd into this directory before running the command
      version_added: "1.3"
      type: "path"
    executable:
      description: |
        The explicit executable or a pathname to the executable to be used to
        run pip for a specific version of Python installed in the system. For
        example C(pip-3.3), if there are both Python 2.7 and 3.3 installations
        in the system and you want to run pip for the Python 3.3 installation.
        It cannot be specified together with the 'virtualenv' parameter (added in 2.1).
        By default, it will take the appropriate version for the python interpreter
        use by ansible, e.g. pip3 on python 3, and pip2 or pip on python 2.
      version_added: "1.3"
      type: "path"
    umask:
      description: |
        The system umask to apply before installing the pip package. This is
        useful, for example, when installing on systems that have a very
        restrictive umask by default (e.g., 0077) and you want to pip install
        packages which are to be used by all users. Note that this requires you
        to specify desired umask mode in octal, with a leading 0 (e.g., 0077).
      version_added: "2.1"
      type: "str"

  required_one_of: [['name', 'requirements']]
  mutually_exclusive: [['name', 'requirements'], ['executable', 'virtualenv']]

  # note, at the moment, these get dropped before running the action, but could
  # in the future be used for better errors or for introspection from external
  # tooling like galaxy/tower or mazer cli etc.
  docs:
    notes:
      - Please note that virtualenv (U(http://www.virtualenv.org/)) must be
        installed on the remote host if the virtualenv parameter is specified and
        the virtualenv needs to be created.
      - By default, this module will use the appropriate version of pip for the
        interpreter used by ansible (e.g. pip3 when using python 3, pip2 otherwise)

    # This is based on the loose adhoc 'requirements' found in some ansible module DOCUMENTATION
    # strings. I suppose it may be useful if a particular way to call a role has more
    # deps than some other way. For ex, a role with a tasks/main.yml and task/to_the_cloud.yml
    # than needs ec2 tools installed
    requirements:
      - name: pip
        type: python_module
      - name: virtualenv
        type: python_module
      - name: setuptools
        type: python_module

    # version_added doesn't make much sense for galaxy roles, but just as placeholder
    # for some potential versioning info
    version_added: "0.7"

    # Could potentially show this info as part of error messages on arg spec failures, more
    # or less like how cli tools will show a particular error and then show the 'usage' info
    # and sometimes the examples. Would be handy for 'ansible-role' in particular.
    # The sub 'example' value could and maybe should just be a string. But left 'structured'
    # here because it could also be thought of as a way to provide some 'canned' usages or
    # 'presets'
    examples:
      - description: Install (Bottle) python package
        example:
          - pip:
            name: bottle
      - description: Install (Bottle) python package on version 0.11.
        example:
          - pip:
            name: bottle==0.11
      - description: Install multi python packages with version specifiers
        example:
          - pip:
              name:
                - django>1.11.0,<1.12.0
                - bottle>0.10,<0.20,!=0.11
      - description: Install (Bottle) into the specified (virtualenv), inheriting globally installed modules
        example:
          - pip:
              name: bottle
              virtualenv: /my_app/venv
              virtualenv_site_packages: true

    # This doesn't do anything yet, but an idea. Basically, some canned invocations of a role that
    # a tool (like ansible-role or tower, etc) could provide as ready to run presets. For example
    # a 'package_manager' role could provide a preset for 'update everything'
    presets:
      - name: update_all_packages
        description: Update all packages except kernel
        preset:
          name: '*'
          state: latest
          exclude: kernel*

